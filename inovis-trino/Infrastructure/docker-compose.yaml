version: '3'
x-airflow-common:
  &airflow-common
  build: 
    context: .
    dockerfile: ./Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./airflow:/opt/airflow/
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # airflow services
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # relational database
  postgres-db-source:
    image: postgres:14.6
    environment:
        POSTGRES_USER: 'srcpostgres'
        POSTGRES_PASSWORD: 'srcpostgres'
        PGDATA: /data/postgres
        POSTGRES_DB: 'src'
    volumes:
        - ./postgres-src:/data/postgres
    ports:
        - "5430:5432"
    restart: on-failure
    healthcheck:
        test: ["CMD", "pg_isready"]
        interval: 30s
        timeout: 20s
        retries: 3
  
  postgres-db-dwh:
    # image: postgis/postgis:14-3.3
    build: 
      context: .
      dockerfile: ./Pstgredocker/Postgredockerfile
    environment:
        POSTGRES_USER: 'dwhpostgres'
        POSTGRES_PASSWORD: 'dwhpostgres'
        PGDATA: /data/postgres
        POSTGRES_MULTIBLE_DATABASES: 'dwh:dwhpostgres,mrr:dwhpostgres,stg:dwhpostgres'
    volumes:
        - ./postgres-dwh:/data/postgres
        - ./Pstgredocker/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    ports:
        - "5429:5432"
    restart: on-failure
    healthcheck:
        test: ["CMD", "pg_isready"]
        interval: 30s
        timeout: 20s
        retries: 3

  # database administration tool
  pgadmin:
    image: 'dpage/pgadmin4:6.13'  
    environment:
        PGADMIN_DEFAULT_EMAIL: 'pgadmin4@pgadmin.org'
        PGADMIN_DEFAULT_PASSWORD: 'admin'
        PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
        - ./pgadmin:/var/lib/pgadmin
    ports:
        - "5050:80"
    restart: on-failure
    healthcheck:
        test: ["CMD", "curl", "-f", "http://mypgadmin:80/misc/ping"]
        interval: 30s
        timeout: 20s
        retries: 3

  trino-coordinator:
    image: 'trinodb/trino:405'
    ports:
      - "8050:8080"
    volumes:
      - ./trino/etc:/usr/lib/trino/etc:ro
      - ./trino/catalog:/etc/trino/catalog

  mariadb:
    image: 'mariadb:latest'
    hostname: mariadb
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db

  hive-metastore:
    image: 'bitsondatadev/hive-metastore:latest'
    hostname: hive-metastore
    ports:
      - '9083:9083' # Metastore Thrift
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb  
  
volumes:
  postgres-db-volume:
  postgres-src:
  postgres-dwh:
  pgadmin:
  airflow:
  trino: